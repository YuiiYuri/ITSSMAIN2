******Authentication******

1. Sign up
Path: /sign-up
Method: POST
Request:
    Body: 
        {
            mail:           string  (required),
            password:       string  (required),
            auth_method:    string  (required)
        }
    // Hien tai thi authMethod de "website registered" vi chua lam dang ky bang google voi facebook
Response:
    {
        "User registered successfully"
    }    

2. Sign in
Path: /sign-in
Method: POST
Request:
    Body: 
        {
            mail:       string  (required),
            password:   string  (required)
        }
Response:
    {
        jwt: string 
    }    
    // Trong jwt token co json chua user_name va avatar, decode ra de lay


******Tasks****** 

1. Create task (USER)
Path: /task
Method: PUT
Request:
    Headers:
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body: 
        {
            task_name:      string  (required),
            description:    string  (required),
            due_date:       string  (required, format "YYYY-MM-DD"),
            priority_id:    int     (required),
            label_id:       int     (required)
        }
Response:
    {
        "Created task successfully"
    }    

2. Get today tasks (USER)
Path: /today-tasks
Method: GET
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
Response:
    [
        {
            task_id:        int,
            task_name:      string,
            description:    string,
            due_date:       "2023-11-18T17:00:00.000Z",
            priority_id:    int,
            label_id:       int,
            user_id:        int,
            created_at:     "2023-11-19T10:47:33.000Z"
        }
    ]

3. Get upcoming tasks (USER)
Path: /upcoming-tasks
Method: GET
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
Response:
    [
        {
            task_id:        int,
            task_name:      string,
            description:    string,
            due_date:       "2023-11-18T17:00:00.000Z",
            priority_id:    int,
            label_id:       int,
            user_id:        int,
            created_at:     "2023-11-19T10:47:33.000Z"
        }
    ]

4. Get all tasks (USER)
Path: /all-tasks
Method: GET
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
Response:
    [
        {
            task_id:        int,
            task_name:      string,
            description:    string,
            due_date:       "2023-11-18T17:00:00.000Z",
            priority_id:    int,
            label_id:       int,
            user_id:        int,
            created_at:     "2023-11-19T10:47:33.000Z"
        }
    ]

5. Get all tasks (ADMIN)
Path: /admin/all-tasks
Method: GET
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
Response:
    [
        {
            task_id:        int,
            task_name:      string,
            description:    string,
            due_date:       "2023-11-18T17:00:00.000Z",
            priority_id:    int,
            label_id:       int,
            user_id:        int,
            created_at:     "2023-11-19T10:47:33.000Z"
            user_name:      string
        }
    ]

6. Edit task (USER)
Path: /task
Method: POST
Request:
    Headers:
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body:
        {
            task_id:        int,
            task_name:      string,
            description:    string,
            due_date:       string,
            priority_id:    int,
            label_id:       int
        }
Response:
    {
        "Updated task successfully"    
    }


7. Delete task (USER)
Path: /task
Method: DELETE
Request:
    Headers:
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body: 
        {
            task_id: int
        }
Response:
    {
        "Deleted task successfully"
    }  

8. Search tasks (USER)
Path: /search-tasks
Method: POST
Request:
    Headers:
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body: 
        {
            task_name:      string
            label_id:       int 
            priority_id:    int
        }
Response:
    [
        {
            "task_id": 8,
            "task_name": "update 123",
            "description": "first update",
            "due_date": "2023-11-26T17:00:00.000Z",
            "priority_id": 1,
            "label_id": 1,
            "user_id": 1,
            "created_at": "2023-11-19T11:38:03.000Z"
        }
    ]

9. Get task details (ADMIN)
Path: /admin/task/:id
Method: POST
Request:
    Headers:
        {
            authorization: token (token nhan khi dang nhap)
        }
    Params: 
        {
            id:     int
        }
Response:
    {
       "user": {
           "user_id": 1,
           "user_name": "quy",
           "mail": "quy@gmail.com",
           "image": "abc"
       },
       "task": {
           "task_id": 8,
           "task_name": "update 123",
           "description": "first update",
           "due_date": "2023-11-26T17:00:00.000Z",
           "priority_id": 1,
           "label_id": 1,
           "user_id": 1,
           "created_at": "2023-11-19T11:38:03.000Z"
       }
    }   

10. Get tasks by filter_id (USER)
Path: /tasks?filter_id=...
Method: GET
Request:
    Headers:
        {
            authorization: token (token nhan khi dang nhap)
        }
    Params: 
        {
            filter_id:  int
        }
Response:
    [
       {
           "task_id": 8,
           "task_name": "update 123",
           "description": "first update",
           "due_date": "2023-11-26T17:00:00.000Z",
           "priority_id": 1,
           "label_id": 1,
           "user_id": 1,
           "created_at": "2023-11-19T11:38:03.000Z"
       }
    ] 

11. Get tasks by label_id (USER)
Path: /tasks?label_id=...
Method: GET
Request:
    Headers:
        {
            authorization: token (token nhan khi dang nhap)
        }
    Params: 
        {
            label_id:  int
        }
Response:
    [
       {
           "task_id": 8,
           "task_name": "update 123",
           "description": "first update",
           "due_date": "2023-11-26T17:00:00.000Z",
           "priority_id": 1,
           "label_id": 1,
           "user_id": 1,
           "created_at": "2023-11-19T11:38:03.000Z"
       }
    ]        

12. Update task's status (USER)
Path: /task/status
Method: POST
Request:
    Headers:
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body:
        {
            task_id:    int,
            status:     int     (0 la` chua xong, 1 la xong)
        }
Response:
    {
        "Updated status successfully"
    }   


******Filters****** 

1. Get filters (USER)
Path: /filters
Method: GET
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
Response:
    [
        {
            filter_id:      int,
            filter_name:    string,
            color:          string,
            user_id:        int
        }
    ]

2. Create filter (USER)
Path: /filters
Method: PUT
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body:
        {
            filter_name:    string,
            color:          string
        }
Response:
    {
        "Created filter successfully"
    }

3. Edit filter (USER)
Path: /filter
Method: POST
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body:
        {
            filter_id:      int,
            filter_name:    string,
            color:          string
        }
Response:
    {
        "Updated filter successfully"
    }

4. Delete filter (USER)
Path: /filter
Method: DELETE
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body:
        {
            filter_id:  int
        }
Response:
    {
        "Deleted filter successfully"
    }


******Labels******

1. Get labels (USER)
Path: /labels
Method: GET
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
Response:
    [
        {
            label_id:   int,
            label_name: string,
            color:      string,
            user_id:    int
        }
    ]

2. Create label (USER)
Path: /label
Method: PUT
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body:
        {
            label_name: string,
            color:      string
        }
Response:
    {
        "Created label successfully"
    }

3. Edit label (USER)
Path: /label
Method: POST
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body:
        {
            label_id:   int,
            label_name: string,
            color:      string
        }
Response:
    {
        "Updated label successfully"
    }

4. Delete label (USER)
Path: /label
Method: DELETE
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
    Body:
        {
            label_id:  int
        }
Response:
    {
        "Deleted label successfully"
    }

5. Get labels (ADMIN)
Path: /admin/labels
Method: GET
Request: 
    Headers: 
        {
            authorization: token (token nhan khi dang nhap)
        }
Response:
    [
        {
            "label_id": 1,
            "label_name": "home",
            "color": "red",
            "user_id": null
        }
    ]